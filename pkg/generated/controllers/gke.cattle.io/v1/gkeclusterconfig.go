/*
Copyright 2019 Wrangler Sample Controller Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/gke-operator/pkg/apis/gke.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// GKEClusterConfigController interface for managing GKEClusterConfig resources.
type GKEClusterConfigController interface {
	generic.ControllerInterface[*v1.GKEClusterConfig, *v1.GKEClusterConfigList]
}

// GKEClusterConfigClient interface for managing GKEClusterConfig resources in Kubernetes.
type GKEClusterConfigClient interface {
	generic.ClientInterface[*v1.GKEClusterConfig, *v1.GKEClusterConfigList]
}

// GKEClusterConfigCache interface for retrieving GKEClusterConfig resources in memory.
type GKEClusterConfigCache interface {
	generic.CacheInterface[*v1.GKEClusterConfig]
}

type GKEClusterConfigStatusHandler func(obj *v1.GKEClusterConfig, status v1.GKEClusterConfigStatus) (v1.GKEClusterConfigStatus, error)

type GKEClusterConfigGeneratingHandler func(obj *v1.GKEClusterConfig, status v1.GKEClusterConfigStatus) ([]runtime.Object, v1.GKEClusterConfigStatus, error)

func RegisterGKEClusterConfigStatusHandler(ctx context.Context, controller GKEClusterConfigController, condition condition.Cond, name string, handler GKEClusterConfigStatusHandler) {
	statusHandler := &gKEClusterConfigStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, generic.FromObjectHandlerToHandler(statusHandler.sync))
}

func RegisterGKEClusterConfigGeneratingHandler(ctx context.Context, controller GKEClusterConfigController, apply apply.Apply,
	condition condition.Cond, name string, handler GKEClusterConfigGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &gKEClusterConfigGeneratingHandler{
		GKEClusterConfigGeneratingHandler: handler,
		apply:                             apply,
		name:                              name,
		gvk:                               controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterGKEClusterConfigStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type gKEClusterConfigStatusHandler struct {
	client    GKEClusterConfigClient
	condition condition.Cond
	handler   GKEClusterConfigStatusHandler
}

func (a *gKEClusterConfigStatusHandler) sync(key string, obj *v1.GKEClusterConfig) (*v1.GKEClusterConfig, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type gKEClusterConfigGeneratingHandler struct {
	GKEClusterConfigGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *gKEClusterConfigGeneratingHandler) Remove(key string, obj *v1.GKEClusterConfig) (*v1.GKEClusterConfig, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.GKEClusterConfig{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *gKEClusterConfigGeneratingHandler) Handle(obj *v1.GKEClusterConfig, status v1.GKEClusterConfigStatus) (v1.GKEClusterConfigStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.GKEClusterConfigGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
